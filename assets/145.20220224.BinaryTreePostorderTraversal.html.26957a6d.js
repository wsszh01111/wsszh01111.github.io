import{r as p,o as t,c as e,a as n,d as o,F as c,b as s,e as r}from"./app.6a81c09a.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i={id:"_145-\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_145-\u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386","aria-hidden":"true"},"#",-1),d=s(),b={href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},m=s("145. \u4E8C\u53C9\u6811\u7684\u540E\u5E8F\u904D\u5386"),h=r(`<h2 id="\u601D\u8DEF1" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF1" aria-hidden="true">#</a> \u601D\u8DEF1</h2><p>\u540E\u5E8F\u904D\u5386\u5C31\u662F\u5DE6-&gt;\u53F3-&gt;\u4E2D \u6700\u7B80\u5355\u7684\u601D\u8DEF\u5C31\u662F\u9012\u5F52</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">postOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token function">recursion</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token function">recursion</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="\u601D\u8DEF2" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF2" aria-hidden="true">#</a> \u601D\u8DEF2</h2><p>\u7528\u8FED\u4EE3\uFF0C\u6838\u5FC3\u9664\u4E86\u4F7F\u7528\u6808\u4E4B\u5916\uFF0C\u8FD8\u9700\u8981\u7528preNode\u5B58\u50A8\u4E0A\u4E00\u4E2A\u8BBF\u95EE\u8FC7\u7684\u8282\u70B9</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">postOrderTraversal</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> curr <span class="token operator">=</span> root
  <span class="token keyword">let</span> preNode

  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span>
      curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>left
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7A7A\u4E86</span>
    <span class="token keyword">const</span> tryRight <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tryRight<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> tryRight<span class="token punctuation">.</span>right <span class="token operator">!==</span> preNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      preNode <span class="token operator">=</span> curr <span class="token operator">=</span> tryRight<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5230\u8FD9\u91CC\u8981\u4E48\u662F\u53F6\u5B50\u8282\u70B9\u8981\u4E48\u662F\u5DF2\u7ECF\u8BBF\u95EE\u8FC7\u5DE6\u53F3\u7684\u8282\u70B9</span>
      <span class="token keyword">const</span> visitNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u8BBF\u95EE\u7684\u65F6\u5019\u624D\u629B\u51FA\u6808</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>visitNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
      preNode <span class="token operator">=</span> visitNode
      curr <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,6);function f(_,y){const a=p("ExternalLinkIcon");return t(),e(c,null,[n("h1",i,[k,d,n("a",b,[m,o(a)])]),h],64)}var w=l(u,[["render",f]]);export{w as default};
