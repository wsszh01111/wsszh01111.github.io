import{r as e,o as p,c as t,a as n,d as o,F as r,b as s,e as c}from"./app.6a81c09a.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u={id:"_1541-\u5E73\u8861\u62EC\u53F7\u4E32\u7684\u6700\u5C11\u63D2\u5165",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_1541-\u5E73\u8861\u62EC\u53F7\u4E32\u7684\u6700\u5C11\u63D2\u5165","aria-hidden":"true"},"#",-1),d=s(),b={href:"https://leetcode-cn.com/problems/minimum-insertions-to-balance-a-parentheses-string",target:"_blank",rel:"noopener noreferrer"},m=s("1541. \u5E73\u8861\u62EC\u53F7\u4E32\u7684\u6700\u5C11\u63D2\u5165"),h=c(`<h2 id="\u601D\u8DEF1" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF1" aria-hidden="true">#</a> \u601D\u8DEF1</h2><p>\u8DDF921\u7C7B\u4F3C \u53EA\u662F\u78B0\u5230\u5DE6\u62EC\u53F7\u8981\u52A02 needRight\u4E3A\u8D1F\u6570\u65F6\u9700\u8981\u5C06\u5176\u7F6E\u4F4D \u4F46\u56E0\u4E3A\u8981\u8FDE\u7EED \u6240\u4EE5\u5F53\u78B0\u5230\u5DE6\u62EC\u53F7\u4E4B\u524D\u7684\u53F3\u62EC\u53F7\u662F\u5947\u6570\u4E2A\u7684\u60C5\u51B5\u65F6 \u9700\u8981\u5C06\u6B64\u65F6needRight\u7684\u503C\u201D\u56FA\u5B9A\u201C\u4E0B\u6765 \u624D\u4F1A\u6709fixedNeedRight\u7684\u5B58\u5728 \u5982&quot;((()())))&quot;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fixedNeedRight <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> needRight <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> needLeft <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>needRight <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u56E0\u4E3A\u8981\u8FDE\u7EED</span>
        fixedNeedRight<span class="token operator">++</span>
        needRight<span class="token operator">--</span>
      <span class="token punctuation">}</span>
      needRight <span class="token operator">+=</span> <span class="token number">2</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      needRight<span class="token operator">--</span>
      
      <span class="token keyword">if</span> <span class="token punctuation">(</span>needRight <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        needLeft<span class="token operator">++</span>
        needRight <span class="token operator">=</span> <span class="token number">1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> needLeft<span class="token operator">+</span>needRight<span class="token operator">+</span>fixedNeedRight
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>`,3);function _(f,g){const a=e("ExternalLinkIcon");return p(),t(r,null,[n("h1",u,[k,d,n("a",b,[m,o(a)])]),h],64)}var w=l(i,[["render",_]]);export{w as default};
