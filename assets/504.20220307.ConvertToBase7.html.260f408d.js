import{r as e,o as p,c as t,a as n,d as o,F as c,b as s,e as r}from"./app.6a81c09a.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i={id:"_504-\u4E03\u8FDB\u5236\u6570",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_504-\u4E03\u8FDB\u5236\u6570","aria-hidden":"true"},"#",-1),b=s(),d={href:"https://leetcode-cn.com/problems/base-7/",target:"_blank",rel:"noopener noreferrer"},m=s("504. \u4E03\u8FDB\u5236\u6570"),_=r(`<h2 id="\u601D\u8DEF1" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF1" aria-hidden="true">#</a> \u601D\u8DEF1</h2><p>\u8DDF\u4E8C\u8FDB\u5236\u4E00\u6837 \u53D6\u4F59\u6570\u5373\u53EF</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sign <span class="token operator">=</span> num <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token number">7</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">let</span> divideRes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>divideRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">break</span>
    <span class="token keyword">const</span> remainder <span class="token operator">=</span> divideRes <span class="token operator">%</span> base
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>remainder<span class="token punctuation">)</span>
    divideRes <span class="token operator">=</span> <span class="token punctuation">(</span>divideRes <span class="token operator">-</span> remainder<span class="token punctuation">)</span> <span class="token operator">/</span> base
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>sign <span class="token operator">*</span> res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,3);function h(f,v){const a=e("ExternalLinkIcon");return p(),t(c,null,[n("h1",i,[k,b,n("a",d,[m,o(a)])]),_],64)}var y=l(u,[["render",h]]);export{y as default};
