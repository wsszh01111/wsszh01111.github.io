import{r as p,o as e,c as t,a as n,d as o,F as c,b as s,e as l}from"./app.6a81c09a.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i={id:"_606-\u6839\u636E\u4E8C\u53C9\u6811\u521B\u5EFA\u5B57\u7B26\u4E32",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_606-\u6839\u636E\u4E8C\u53C9\u6811\u521B\u5EFA\u5B57\u7B26\u4E32","aria-hidden":"true"},"#",-1),b=s(),d={href:"https://leetcode-cn.com/problems/construct-string-from-binary-tree/",target:"_blank",rel:"noopener noreferrer"},m=s("606. \u6839\u636E\u4E8C\u53C9\u6811\u521B\u5EFA\u5B57\u7B26\u4E32"),f=l(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) <span class="token punctuation">{</span>
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * <span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="\u601D\u8DEF1" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF1" aria-hidden="true">#</a> \u601D\u8DEF1</h2><p>\u95EE\u9898\u89E3\u51B3\u5F88\u7B80\u5355\uFF0C\u53EA\u9700\u8981\u524D\u5E8F\u904D\u5386\u5373\u53EF\u3002\u9898\u76EE\u672C\u8D28\u5176\u5B9E\u662F\u7ED9\u51FA\u4E86\u4E00\u79CD\u5C06\u6811\u7ED3\u6784\u5E8F\u5217\u5316\u7684\u65B9\u5F0F\uFF0C\u5BF9\u4E8E\u6BCF\u4E2A\u8282\u70B9\uFF0C\u5B8C\u6574\u60C5\u51B5\u4E0B\u5176\u540E\u90FD\u4F1A\u6709\u4E24\u4E2A\uFF08\u56E0\u4E3A\u662F\u4E8C\u53C9\u6811\uFF09\u7528\u62EC\u53F7\u5305\u88F9\u7684\u6570\uFF0C\u5373<strong>x(x)(x)</strong>\uFF0C\u8981\u4FDD\u8BC1\u5176\u80FD\u548C\u6811\u7ED3\u6784\u4E00\u4E00\u5BF9\u5E94\u4E0D\u4EA7\u751F\u6B67\u4E49\uFF0C\u5176\u5B9E\u6700\u7B80\u5355\u7684\u65B9\u5F0F\u5C31\u5E94\u8BE5\u5728\u6240\u6709\u5B50\u8282\u70B9\u4E3A\u7A7A\u65F6\u90FD\u7528()\u66FF\u4EE3\u3002\u4F46\u9898\u76EE\u7ED9\u51FA\u4E86\u201C\u7701\u7565\u6240\u6709\u4E0D\u5F71\u54CD\u5B57\u7B26\u4E32\u4E0E\u539F\u59CB\u4E8C\u53C9\u6811\u4E4B\u95F4\u7684\u4E00\u5BF9\u4E00\u6620\u5C04\u5173\u7CFB\u7684\u7A7A\u62EC\u53F7\u5BF9\u201D\u7684\u7EA6\u675F\uFF0C\u8FD9\u5176\u5B9E\u4E5F\u5C31\u662F\u544A\u8BC9\u6211\u4EEC\u53EF\u4EE5\u5BF9\u5F97\u5230\u7684\u5B57\u7B26\u4E32\u8FDB\u884C\u4F18\u5316\u3002\u6839\u636E\u9898\u4F8B\u53EF\u5F97\uFF0C\u4E3A\u4E86\u4E0D\u4EA7\u751F\u6B67\u4E49\uFF0C\u5C31\u9700\u8981\u5728\u5DE6\u8282\u70B9\u4E3A\u7A7A\u65F6\u8FDB\u884C\u4FDD\u7559\uFF0C\u5426\u5219\u5982\u9898\u4E2D\u7ED9\u51FA\u7684\u4F8B\u5B50**1(2(4))(3)**\u5C31\u53EF\u4EE5\u53CD\u5E8F\u5217\u5316\u51FA\u4E24\u79CD\u7ED3\u679C\uFF0C\u53734\u662F2\u7684\u5DE6\u53F3\u8282\u70B9\u90FD\u6709\u53EF\u80FD\uFF1B\u518D\u5EF6\u4F38\u4E0B\uFF0C\u5BF9\u4E8E\u591A\u53C9\u6811\uFF0C\u5B50\u8282\u70B9\u672C\u8EAB\u7684\u4F4D\u7F6E\u4FE1\u606F\u5C31\u4F1A\u6709\u6B67\u4E49\uFF0C\u6BD4\u5982\u4E09\u53C9\u6811\u67D0\u4E2A\u8282\u70B9\u53EA\u6709\u4E24\u4E2A\u5B50\u8282\u70B9\uFF0C\u53EF\u4EE5\u4EFB\u610F\u8BA4\u4E3A\u7F3A\u5C11\u7684\u5B50\u8282\u70B9\u7684\u5DE6\u4E2D\u53F3\u5B50\u8282\u70B9\uFF0C\u56E0\u6B64\u6269\u5C55\u5230\u591A\u53C9\u6811\uFF0C\u5BF9\u4E8E\u8FD9\u79CD\u5E8F\u5217\u5316\u65B9\u5F0F\u672C\u8EAB\u5C31\u4E0D\u592A\u9002\u7528\uFF0C\u9664\u975E\u8981\u6709\u6BD4\u8F83\u4E25\u683C\u7684\u5B9A\u4E49\u7F3A\u5931\u5B50\u8282\u70B9\u7684\u4F4D\u7F6E</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">tree2str</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  
  <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">||</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span>
      <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span>
      <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,4);function h(_,g){const a=p("ExternalLinkIcon");return e(),t(c,null,[n("h1",i,[k,b,n("a",d,[m,o(a)])]),f],64)}var y=r(u,[["render",h]]);export{y as default};
