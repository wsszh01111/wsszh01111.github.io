import{r as t,o,c as e,a as n,d as p,F as c,b as s,e as l}from"./app.6a81c09a.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},k={id:"_688-\u9A91\u58EB\u5728\u68CB\u76D8\u4E0A\u7684\u6982\u7387",tabindex:"-1"},i=n("a",{class:"header-anchor",href:"#_688-\u9A91\u58EB\u5728\u68CB\u76D8\u4E0A\u7684\u6982\u7387","aria-hidden":"true"},"#",-1),b=s(),d={href:"https://leetcode-cn.com/problems/knight-probability-in-chessboard/",target:"_blank",rel:"noopener noreferrer"},m=s("688. \u9A91\u58EB\u5728\u68CB\u76D8\u4E0A\u7684\u6982\u7387"),h=n("h2",{id:"\u601D\u8DEF1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u601D\u8DEF1","aria-hidden":"true"},"#"),s(" \u601D\u8DEF1")],-1),_=s("\u6765\u81EA"),y={href:"https://leetcode-cn.com/problems/knight-probability-in-chessboard/solution/qi-shi-zai-qi-pan-shang-de-gai-lu-by-lee-2qhk/",target:"_blank",rel:"noopener noreferrer"},f=s("Leetcode\u5B98\u65B9"),w=l(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">knightProbabilityInChessboard</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">step</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">row</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> step <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> step<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> rIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rIndex <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> rIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> cIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cIndex <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> cIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>step <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// base case \u8DF3\u7684\u7B2C0\u6B65\u4E3A\u4E86\u8BA1\u7B97\u6982\u7387\u65B9\u4FBF\u8BBE\u7F6E\u4E3A1</span>
          dp<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>cIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> lastCount <span class="token operator">=</span> <span class="token number">0</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> p <span class="token keyword">of</span> paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> lastRIndex <span class="token operator">=</span> rIndex<span class="token operator">+</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">const</span> lastCIndex <span class="token operator">=</span> cIndex<span class="token operator">+</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token comment">// \u4E3A\u4E86\u4FDD\u8BC1\u6570\u7EC4\u4E0D\u8D8A\u754C</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lastRIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> lastRIndex <span class="token operator">&gt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lastCIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> lastCIndex <span class="token operator">&gt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>
            lastCount <span class="token operator">+=</span> dp<span class="token punctuation">[</span>step<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>lastRIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>lastCIndex<span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
          dp<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>cIndex<span class="token punctuation">]</span> <span class="token operator">=</span> lastCount <span class="token operator">/</span> <span class="token number">8</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,1);function x(I,g){const a=t("ExternalLinkIcon");return o(),e(c,null,[n("h1",k,[i,b,n("a",d,[m,p(a)])]),h,n("p",null,[_,n("a",y,[f,p(a)])]),w],64)}var N=u(r,[["render",x]]);export{N as default};
