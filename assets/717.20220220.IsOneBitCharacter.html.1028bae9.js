import{r as p,o as t,c as e,a as n,d as o,F as c,b as s,e as l}from"./app.6a81c09a.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i={id:"_717-1\u6BD4\u7279\u4E0E2\u6BD4\u7279\u5B57\u7B26",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_717-1\u6BD4\u7279\u4E0E2\u6BD4\u7279\u5B57\u7B26","aria-hidden":"true"},"#",-1),b=s(),m={href:"https://leetcode-cn.com/problems/1-bit-and-2-bit-characters/",target:"_blank",rel:"noopener noreferrer"},d=s("717. 1\u6BD4\u7279\u4E0E2\u6BD4\u7279\u5B57\u7B26"),h=l(`<h2 id="\u601D\u8DEF1" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF1" aria-hidden="true">#</a> \u601D\u8DEF1</h2><p>\u672C\u8D28\u8FD8\u662F\u56DE\u6EAF\uFF0C\u4F7F\u7528\u9012\u5F52\u5904\u7406\uFF0C\u901F\u5EA6\u8FD8\u53EF\u4EE5\u8D8590%\uFF0C\u7528\u4E86\u9012\u5F52\u7684\u8BDD\u5185\u5B58\u4F7F\u7528\u592A\u5927\u4E86\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u6700\u597D\u7684\u60C5\u51B5\u662FO(N/2)\uFF0C\u6700\u5DEE\u7684\u7406\u8BBA\u60C5\u51B5\u8981\u5230O(2**N)\uFF0C\u76F8\u5F53\u4E8E\u904D\u5386\u4E00\u68F5\u4E8C\u53C9\u6811</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isOneBitCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">// \u6839\u636E\u9898\u610F \u53EA\u67090\u6709\u53EF\u80FD</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> bits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span>

  <span class="token comment">// \u5176\u4F59\u4E00\u4E9B\u7279\u6B8A\u60C5\u51B5\u53EF\u4EE5\u76F4\u63A5\u6392\u9664</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// xxxx00</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> bits<span class="token punctuation">[</span>bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// xxxx010</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u4EC5\u5269xxxx110 \u95EE\u9898\u53D8\u6210\u4E86\u5224\u65AD11\u80FD\u4E0D\u80FD\u5339\u914D\u6210\u529F \u7528\u9012\u5F52\u8FDB\u884C\u56DE\u6EAF</span>
  <span class="token comment">// \u5982\u679C11\u524D\u9762\u7684\u80FD\u5339\u914D\u6210\u529F 11\u5C31\u80FD\u5339\u914D\u6210\u529F \u6240\u4EE5boundIndex\u53D8\u6210\u4E86bits.length-4</span>
  <span class="token doc-comment comment">/**
   * \u8FD4\u56DE\u4EE5endIndex\u4E3A\u8FB9\u754C\u7684bits\u662F\u5426\u80FD\u5339\u914D\u6210\u529F
   */</span>
  <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">bits<span class="token punctuation">,</span> endIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">// \u8D8A\u754C\u4E86 \u8BF4\u660E\u4E4B\u524D\u7684\u90FD\u6210\u529F\u4E86</span>

    <span class="token keyword">const</span> mRes <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>bits<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> jump <span class="token keyword">of</span> mRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>bits<span class="token punctuation">,</span> endIndex <span class="token operator">-</span> jump<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token keyword">return</span> res
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>bits<span class="token punctuation">,</span> bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * \u8FDB\u884C\u5339\u914D\u5E76\u8FD4\u56DE\u6240\u6709\u80FD\u5339\u914D\u7684\u60C5\u51B5\u4E0B\u9700\u8981\u8DF3\u8DC3\u7684\u7D22\u5F15\u95F4\u8DDD
 */</span>
<span class="token keyword">function</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token parameter">bits<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7531\u4E8E\u6709\u8D8A\u754C\u7684\u53EF\u80FD \u6240\u4EE5\u8FD9\u8FB9\u90FD\u9700\u8981===</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="\u601D\u8DEF2" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF2" aria-hidden="true">#</a> \u601D\u8DEF2</h2><p>LeetCode\u5B98\u65B9\u89E3\u6CD5\uFF0C\u6B63\u5E8F\u904D\u5386\uFF0Chttps://leetcode-cn.com/problems/1-bit-and-2-bit-characters/solution/1bi-te-yu-2bi-te-zi-fu-by-leetcode-solut-rhrh/</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isOneBitCharacter2</span><span class="token punctuation">(</span><span class="token parameter">bits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bits<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> i <span class="token operator">+=</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i <span class="token operator">===</span> bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,6);function f(y,w){const a=p("ExternalLinkIcon");return t(),e(c,null,[n("h1",i,[k,b,n("a",m,[d,o(a)])]),h],64)}var g=r(u,[["render",f]]);export{g as default};
