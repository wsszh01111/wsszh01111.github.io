import{r as p,o as e,c as o,a as n,d as t,F as c,b as s,e as u}from"./app.6a81c09a.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i={id:"_90-\u5B50\u96C6-ii",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_90-\u5B50\u96C6-ii","aria-hidden":"true"},"#",-1),b=s(),m={href:"https://leetcode-cn.com/problems/subsets-ii/",target:"_blank",rel:"noopener noreferrer"},_=s("90. \u5B50\u96C6 II"),d=s("\u5E26\u6709\u91CD\u590D\u503C\u7684\u65E0\u91CD\u590D\u5B50\u96C6\uFF0C\u603B\u4F53\u601D\u8DEF\u8DDF78\u5DEE\u4E0D\u591A\uFF0C\u4E0D\u8FC7\u95EE\u9898\u5728\u4E8E\u6709\u91CD\u590D\u503C\uFF0C\u753B\u4E2A\u51B3\u7B56\u6811\u53EF\u77E5\u8981\u4FDD\u8BC1\u7ED3\u679C\u65E0\u91CD\u590D\u5B50\u96C6\uFF0C\u5C31\u9700\u8981\u5BF9\u51B3\u7B56\u6811\u526A\u679D\uFF0C\u95EE\u9898\u6838\u5FC3\u5C31\u662F\u5982\u4F55\u8FDB\u884C\u526A\u679D\uFF1F\u5C06\u6570\u7EC4\u6392\u5E8F\u540E\u8DF3\u8FC7\u76F8\u540C\u7684\u503C\u786E\u5B9E\u662F\u4E2A\u5F88\u5999\u7684\u601D\u8DEF\uFF0C"),h={href:"https://labuladong.gitee.io/algo/4/30/110/",target:"_blank",rel:"noopener noreferrer"},f=s("\u56DE\u6EAF\u7B97\u6CD5\u79D2\u6740\u6240\u6709\u6392\u5217/\u7EC4\u5408/\u5B50\u96C6\u95EE\u9898"),g=s("\u91CC\u8BB2\u7684\u4E5F\u6BD4\u8F83\u6E05\u695A\u3002\u4F46\u5176\u4E2D\u6709\u4E00\u70B9\u6CA1\u6709\u63D0\u5230\uFF0C\u5373\u526A\u679D\u53EA\u80FD\u526A\u679D\u53F3\u5B50\u6811\uFF08\u5373\u53EA\u80FD\u901A\u8FC7"),v=n("code",null,"nums[i] === nums[i-1]",-1),w=s("\u5224\u65AD\uFF0C\u800C\u4E0D\u80FD\u901A\u8FC7"),x=n("code",null,"nums[i] === nums[i+1]",-1),y=s("\uFF09\uFF0C\u867D\u7136\u7406\u8BBA\u4E0A\u5BF9\u5DE6\u53F3\u5B50\u6811\u8FDB\u884C\u526A\u679D\u90FD\u662F\u53EF\u4EE5\u7684\uFF0C\u4F46\u9898\u76EE\u4E2D\u8FD9\u91CC\u662F\u5BF9\u6570\u7EC4\u7684\u8FED\u4EE3\uFF0C\u8DF3\u5230\u51B3\u7B56\u6811\u7684\u4E0B\u4E00\u5C42\u4E5F\u662F\u901A\u8FC7"),I=n("code",null,"backtrack(path, i+1)",-1),N=s("\u63A7\u5236\u7684\uFF0C\u56E0\u6B64\u5982\u679C\u662F\u526A\u679D\u5DE6\u5B50\u6811\uFF0C\u4F1A\u63D0\u524D\u89E6\u53D1\u7EC8\u6B62\u6761\u4EF6"),V=n("code",null,"i < nums.length",-1),j=s("\u800C\u6F0F\u6389\u6574\u4E2A\u5B50\u96C6\u662F\u5168\u96C6\u7684\u60C5\u51B5"),B=u(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>

  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

      <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>

      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res &#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,1);function E(D,F){const a=p("ExternalLinkIcon");return e(),o(c,null,[n("h1",i,[k,b,n("a",m,[_,t(a)])]),n("p",null,[d,n("a",h,[f,t(a)]),g,v,w,x,y,I,N,V,j]),B],64)}var W=l(r,[["render",E]]);export{W as default};
